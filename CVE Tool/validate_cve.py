import re
import requests
from datetime import datetime



def sanitize_cve_id(input_str):
    """
    Validates and sanitizes the CVE ID to ensure it matches the pattern CVE-YYYY-NNNN.
    The year must be between 1999 and the current year, and the ID part must be 4 or more digits long.
    Returns the sanitized CVE ID if valid, otherwise returns None.
    """
    pattern = r'(?i)\bcve-\d{4}-\d{4,8}\b'

    # if re.match(pattern, input_str):
    #     if not input_str.startswith("CVE-"):
    #         input_str = "CVE-" + input_str 

    # Check if year section of ID is valid
    if re.match(pattern, input_str):
        split_input = input_str.upper().split('-')

        if split_input[2] == "0000":
            print("Error: The ID part cannot be all zeros.")
            return None

        if len(split_input) == 3 and 1999 <= int(split_input[1]) <= datetime.now().year and len(split_input[2]) >= 4:
            return input_str.upper()
    
    return None

def is_cve_exist(cve_id):
    """
    Checks if a CVE ID exists and returns its status.
    Uses the NVD API to determine if the CVE ID is published, rejected, or reserved.
    Returns True if the CVE ID exists and is published, otherwise returns False.
    """
    api_url = f"https://services.nvd.nist.gov/rest/json/cves/2.0?cveId={cve_id}"
    
    try:
        response = requests.get(api_url)
        
        # Check if the response status code is successful (200 OK)
        if response.status_code == 200:
            cve_data = response.json()
            
            # Check if 'vulnerabilities' key exists and is not empty
            if 'vulnerabilities' in cve_data and cve_data['vulnerabilities']:
                print(f"[•] CVE ID {cve_id} exists.")
                return True
            
            print(f"[•] CVE ID {cve_id} does not exist or has no data.")
            return False
        
        else:
            print(f"[•] Unable to fetch data for CVE ID {cve_id}. HTTP Status Code: {response.status_code}")
            return False
    
    except requests.RequestException as e:
        print(f"[•] Error occurred: {e}")
        return False
